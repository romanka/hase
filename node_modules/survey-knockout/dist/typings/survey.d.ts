// Type definitions for Survey JavaScript library v0.10.0
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base, ISurvey, IQuestion, IPage, SurveyError, Event } from "./base";
import { ISurveyTriggerOwner, SurveyTrigger } from "./trigger";
import { PageModel } from "./page";
import { JsonError } from "./jsonobject";
export declare class SurveyModel extends Base implements ISurvey, ISurveyTriggerOwner {
    surveyId: string;
    surveyPostId: string;
    clientId: string;
    cookieName: string;
    sendResultOnPageNext: boolean;
    commentPrefix: string;
    title: string;
    showNavigationButtons: boolean;
    showTitle: boolean;
    showPageTitles: boolean;
    completedHtml: string;
    requiredText: string;
    questionStartIndex: string;
    questionTitleTemplate: string;
    showProgressBar: string;
    storeOthersAsComment: boolean;
    goNextPageAutomatic: boolean;
    pages: Array<PageModel>;
    triggers: Array<SurveyTrigger>;
    clearInvisibleValues: boolean;
    private currentPageValue;
    private valuesHash;
    private variablesHash;
    private pagePrevTextValue;
    private pageNextTextValue;
    private completeTextValue;
    private showPageNumbersValue;
    private showQuestionNumbersValue;
    private questionTitleLocationValue;
    private localeValue;
    private isCompleted;
    private isLoading;
    private processedTextValues;
    private textPreProcessor;
    onComplete: Event<(sender: SurveyModel) => any, any>;
    onCurrentPageChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onValueChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onVisibleChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onPageVisibleChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onQuestionAdded: Event<(sender: SurveyModel, options: any) => any, any>;
    onQuestionRemoved: Event<(sender: SurveyModel, options: any) => any, any>;
    onValidateQuestion: Event<(sender: SurveyModel, options: any) => any, any>;
    onProcessHtml: Event<(sender: SurveyModel, options: any) => any, any>;
    onSendResult: Event<(sender: SurveyModel, options: any) => any, any>;
    onGetResult: Event<(sender: SurveyModel, options: any) => any, any>;
    onUploadFile: Event<(sender: SurveyModel, options: any) => any, any>;
    jsonErrors: Array<JsonError>;
    mode: string;
    constructor(jsonObj?: any);
    getType(): string;
    locale: string;
    getLocString(str: string): any;
    emptySurveyText: string;
    pagePrevText: string;
    pageNextText: string;
    completeText: string;
    showPageNumbers: boolean;
    showQuestionNumbers: string;
    questionTitleLocation: string;
    data: any;
    comments: any;
    visiblePages: Array<PageModel>;
    isEmpty: boolean;
    PageCount: number;
    visiblePageCount: number;
    currentPage: PageModel;
    state: string;
    clear(): void;
    protected mergeValues(src: any, dest: any): void;
    protected currentPageChanged(newValue: PageModel, oldValue: PageModel): void;
    getProgress(): number;
    isDesignMode: boolean;
    hasCookie: boolean;
    setCookie(): void;
    deleteCookie(): void;
    nextPage(): boolean;
    isCurrentPageHasErrors: boolean;
    prevPage(): boolean;
    completeLastPage(): boolean;
    isFirstPage: boolean;
    isLastPage: boolean;
    doComplete(): void;
    protected setCompleted(): void;
    processedCompletedHtml: string;
    processedLoadingHtml: string;
    progressText: string;
    uploadFile(name: string, file: File, storeDataAsText: boolean, uploadingCallback: (status: string) => any): boolean;
    protected uploadFileCore(name: string, file: File, uploadingCallback: (status: string) => any): void;
    getPage(index: number): PageModel;
    addPage(page: PageModel): void;
    addNewPage(name: string): PageModel;
    removePage(page: PageModel): void;
    getQuestionByName(name: string, caseInsensitive?: boolean): IQuestion;
    getQuestionsByNames(names: string[], caseInsensitive?: boolean): IQuestion[];
    getPageByQuestion(question: IQuestion): PageModel;
    getPageByName(name: string): PageModel;
    getPagesByNames(names: string[]): PageModel[];
    getAllQuestions(visibleOnly?: boolean): Array<IQuestion>;
    protected createNewPage(name: string): PageModel;
    private notifyQuestionOnValueChanged(name, newValue);
    private notifyAllQuestionsOnValueChanged();
    protected doSurveyValueChanged(question: IQuestion, newValue: any): void;
    private checkOnPageTriggers();
    private getCurrentPageQuestions();
    private checkTriggers(name, newValue, isOnNextPage);
    private doQuestionsOnLoad();
    private runConditions();
    private runConditionsForList(list);
    sendResult(postId?: string, clientId?: string, isPartialCompleted?: boolean): void;
    getResult(resultId: string, name: string): void;
    loadSurveyFromService(surveyId?: string): void;
    protected onLoadingSurveyFromService(): void;
    protected onLoadSurveyFromService(): void;
    private updateVisibleIndexes();
    private updatePageVisibleIndexes(showIndex);
    private updateQuestionVisibleIndexes(questions, showIndex);
    private setJsonObject(jsonObj);
    protected onBeforeCreating(): void;
    protected onCreating(): void;
    private updateProcessedTextValues();
    private addQuestionToProcessedTextValues(question);
    private getProcessedTextValue(name);
    private clearInvisibleQuestionValues();
    getVariable(name: string): any;
    setVariable(name: string, newValue: any): void;
    private getUnbindValue(value);
    getValue(name: string): any;
    setValue(name: string, newValue: any): void;
    private isValueEqual(name, newValue);
    private isTwoValueEquals(x, y);
    private tryGoNextPageAutomatic(name);
    getComment(name: string): string;
    setComment(name: string, newValue: string): void;
    questionVisibilityChanged(question: IQuestion, newValue: boolean): void;
    pageVisibilityChanged(page: IPage, newValue: boolean): void;
    questionAdded(question: IQuestion, index: number): void;
    questionRemoved(question: IQuestion): void;
    validateQuestion(name: string): SurveyError;
    processHtml(html: string): string;
    processText(text: string): string;
    getObjects(pages: string[], questions: string[]): any[];
    setTriggerValue(name: string, value: any, isVariable: boolean): void;
}
